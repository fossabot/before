{"version":3,"sources":["components/CalendarGrid.js","pages/Explore.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["CalendarGrid","dates","startDate","endDate","currDate","moment","startOf","lastDate","add","diff","push","clone","enumerateDaysBetweenDates","datesByWeek","week_","week_group","date","week","length","firstWeek","unshift","lastWeek","slice","GridMouseEnter","event","parseInt","target","dataset","setSelectedDate","GridMouseLeave","useState","selectedDate","className","style","width","margin","map","data-date","onMouseEnter","onMouseLeave","format","Explore","NotFound","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA6FeA,MA1Ff,WAEE,IAFsB,EAoBlBC,EAlB4B,SAAUC,EAAWC,GAMnD,IALA,IAAIF,EAAQ,GAERG,EAAWC,IAAOH,GAAWI,QAAQ,OACrCC,EAAWF,IAAOF,GAASG,QAAQ,OAEhCF,EAASI,IAAI,EAAG,QAAQC,KAAKF,GAAY,GAC9CN,EAAMS,KAAKN,EAASO,SAGtB,OAAOV,EAQGW,CAHIP,IAAO,WAFH,YAGNA,IAAO,WAHD,aAOhBQ,EAAc,GAEdC,EAAQ,EACRC,EAAa,GAzBK,cA2BHd,GA3BG,IA2BtB,2BAA0B,CAAC,IAAhBe,EAAe,QACpBF,IAAUE,EAAKC,SACjBJ,EAAYH,KAAKK,GACjBA,EAAa,GACbD,EAAQE,EAAKC,QAGfF,EAAWL,KAAKM,IAlCI,8BAqClBD,EAAWG,OAAS,GACtBL,EAAYH,KAAKK,GAKnB,IAFA,IAAMI,EAAYN,EAAY,GAEvBM,EAAUD,OAAS,GACxBC,EAAUC,QAAQD,EAAU,GAAGR,QAAQH,KAAK,EAAG,SAKjD,IAFA,IAAMa,EAAWR,EAAYS,OAAO,GAAG,GAEhCD,EAASH,OAAS,GACvBG,EAASX,KAAKW,EAASC,OAAO,GAAG,GAAGX,QAAQH,IAAI,EAAG,SAGrD,IAAMe,EAAiB,SAACC,GACtB,IAAMR,EAAOX,IAAOoB,SAASD,EAAME,OAAOC,QAAQX,OAElDY,EAAgBZ,IAGZa,EAAiB,SAACL,KA3DF,EA+DkBM,mBAASjB,EAAY,GAAG,IA/D1C,mBA+DfkB,EA/De,KA+DDH,EA/DC,KAiEtB,OACE,6BACE,yBACEI,UAAU,+CACVC,MAAO,CAAEC,MAAO,cAAeC,OAAQ,WACtCtB,EAAYuB,KAAI,SAACnB,GAAD,OACf,yBAAKe,UAAS,SACXf,EAAKmB,KAAI,SAACpB,GAAD,OACR,yBACEgB,UAAS,+EACTC,MAAO,CAAEE,OAAQ,OACjBE,YAAWrB,EACXsB,aAAcf,EACdgB,aAAcV,YAKxB,yBAAKG,UAAU,qBAAf,gBACgBD,GAAgBA,EAAaS,OAAO,KAAM,OC3EjDC,MARf,WACE,OACE,yBAAKT,UAAU,SACf,kBAAC,EAAD,QCCWU,MANf,WACE,OACE,sCCqBWC,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,WACf,kBAAC,EAAD,OAIH,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCNUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e048a248.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nfunction CalendarGrid() {\n\n  let enumerateDaysBetweenDates = function (startDate, endDate) {\n    let dates = [];\n\n    let currDate = moment(startDate).startOf('day');\n    let lastDate = moment(endDate).startOf('day');\n\n    while (currDate.add(1, 'days').diff(lastDate) < 0) {\n      dates.push(currDate.clone());\n    }\n\n    return dates;\n  };\n\n  const DATE_FORMAT = 'YYYYMMDD';\n\n  let startDate = moment('20130101', DATE_FORMAT);\n  let endDate = moment('20140101', DATE_FORMAT);\n\n  let dates = enumerateDaysBetweenDates(startDate, endDate);\n\n  let datesByWeek = [];\n\n  let week_ = 1;\n  let week_group = [];\n\n  for (const date of dates) {\n    if (week_ !== date.week()) {\n      datesByWeek.push(week_group);\n      week_group = [];\n      week_ = date.week();\n    }\n\n    week_group.push(date);\n  }\n\n  if (week_group.length > 0) {\n    datesByWeek.push(week_group);\n  }\n\n  const firstWeek = datesByWeek[0];\n\n  while (firstWeek.length < 7) {\n    firstWeek.unshift(firstWeek[0].clone().add(-1, 'days'));\n  }\n\n  const lastWeek = datesByWeek.slice(-1)[0];\n\n  while (lastWeek.length < 7) {\n    lastWeek.push(lastWeek.slice(-1)[0].clone().add(1, 'days'));\n  }\n\n  const GridMouseEnter = (event) => {\n    const date = moment(parseInt(event.target.dataset.date));\n\n    setSelectedDate(date);\n  };\n\n  const GridMouseLeave = (event) => {\n    // console.log(event.target.dataset)\n  };\n\n  const [selectedDate, setSelectedDate] = useState(datesByWeek[0][0]);\n  \n  return (\n    <div>\n      <div\n        className=\"flex p-2 bg-gray-200 rounded-lg shadow-inner\"\n        style={{ width: 'max-content', margin: '0 auto' }}>\n        {datesByWeek.map((week) => (\n          <div className={`block`}>\n            {week.map((date) => (\n              <div\n                className={`block bg-green-500 hover:bg-green-200 w-4 h-4 rounded text-xs cursor-pointer`}\n                style={{ margin: '2px' }}\n                data-date={date}\n                onMouseEnter={GridMouseEnter}\n                onMouseLeave={GridMouseLeave}></div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"text-center mt-12\">\n        Top pages on {selectedDate && selectedDate.format('L')}{' '}\n      </div>\n    </div>\n  );\n}\n\nexport default CalendarGrid;\n","import React from 'react';\n\nimport CalendarGrid from \"../components/CalendarGrid\"\n\nfunction Explore() {\n  return (\n    <div className=\"mt-12\">\n    <CalendarGrid />\n    </div>\n  );\n}\n\nexport default Explore;","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div>404!</div>\n  );\n}\n\nexport default NotFound;","import React from 'react';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Explore from './pages/Explore';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        {/* Public Routes */}\n        <Route exact path=\"/before\">\n          {<Explore />}\n        </Route>\n\n        {/* Catch-all Route */}\n        <Route path=\"/\">\n          <NotFound />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/CalendarGrid.js","components/DarkMode.js","pages/Explore.js","pages/NotFound.js","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["CalendarGrid","dates","startDate","endDate","currDate","moment","startOf","lastDate","add","diff","push","clone","enumerateDaysBetweenDates","datesByWeek","week_","week_group","date","week","length","firstWeek","unshift","lastWeek","slice","useState","selectedDate","_setSelectedDate","selectedDateRef","React","useRef","setSelectedDate","data","current","gridClick","event","parseInt","target","dataset","monthColors","Array","fill","flat","handlers","TOMORROW","currentDate","YESTERDAY","NEXT_WEEK","LAST_WEEK","className","keyMap","style","outline","effect","width","margin","map","isSameDay","isSame","backgroundColor","month","data-date","data-tip","format","onClick","useDarkMode","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","window","localStorage","setItem","useEffect","localTheme","getItem","matchMedia","matches","Explore","NotFound","App","toggleTheme","document","documentElement","classList","remove","onChange","checked","size","speed","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c73f3d7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport chroma from 'chroma-js';\nimport { GlobalHotKeys } from 'react-hotkeys';\nimport ReactTooltip from 'react-tooltip';\n\nfunction CalendarGrid() {\n  let enumerateDaysBetweenDates = function (startDate, endDate) {\n    let dates = [];\n\n    let currDate = moment(startDate).startOf('day');\n    let lastDate = moment(endDate).startOf('day');\n\n    while (currDate.add(1, 'days').diff(lastDate) < 0) {\n      dates.push(currDate.clone());\n    }\n\n    return dates;\n  };\n\n  const DATE_FORMAT = 'YYYYMMDD';\n\n  let startDate = moment('20130101', DATE_FORMAT);\n  let endDate = moment('20140101', DATE_FORMAT);\n\n  let dates = enumerateDaysBetweenDates(startDate, endDate);\n\n  let datesByWeek = [];\n\n  let week_ = 1;\n  let week_group = [];\n\n  for (const date of dates) {\n    if (week_ !== date.week()) {\n      datesByWeek.push(week_group);\n      week_group = [];\n      week_ = date.week();\n    }\n\n    week_group.push(date);\n  }\n\n  if (week_group.length > 0) {\n    datesByWeek.push(week_group);\n  }\n\n  const firstWeek = datesByWeek[0];\n\n  while (firstWeek.length < 7) {\n    firstWeek.unshift(firstWeek[0].clone().add(-1, 'days'));\n  }\n\n  const lastWeek = datesByWeek.slice(-1)[0];\n\n  while (lastWeek.length < 7) {\n    lastWeek.push(lastWeek.slice(-1)[0].clone().add(1, 'days'));\n  }\n\n  const [selectedDate, _setSelectedDate] = useState(datesByWeek[0][0]);\n\n  const selectedDateRef = React.useRef(selectedDate);\n  const setSelectedDate = (data) => {\n    selectedDateRef.current = data;\n    _setSelectedDate(data);\n  };\n\n  const gridClick = (event) => {\n    const date = moment(parseInt(event.target.dataset.date));\n\n    setSelectedDate(date.clone());\n  };\n\n  const gridSizing = 'w-4 h-4 rounded';\n  const gridTransition = 'transition ease-in duration-200';\n\n  const monthColors = new Array(12).fill(['#00bcd4', '#a6dcef']).flat();\n\n  const tomorrow = () => {\n    let currentDate = selectedDateRef.current.clone();\n\n    currentDate.add(1, 'days');\n    setSelectedDate(currentDate);\n  };\n\n  const nextWeek = () => {\n    let currentDate = selectedDateRef.current.clone();\n\n    currentDate.add(7, 'days');\n    setSelectedDate(currentDate);\n  };\n\n  const yesterday = () => {\n    let currentDate = selectedDateRef.current.clone();\n\n    currentDate.add(-1, 'days');\n    setSelectedDate(currentDate);\n  };\n\n  const prevWeek = () => {\n    let currentDate = selectedDateRef.current.clone();\n\n    currentDate.add(-7, 'days');\n    setSelectedDate(currentDate);\n  };\n\n  const keyMap = {\n    TOMORROW: ['down'],\n    YESTERDAY: ['up'],\n    NEXT_WEEK: ['right'],\n    LAST_WEEK: ['left'],\n  };\n\n  const handlers = {\n    TOMORROW: tomorrow,\n    YESTERDAY: yesterday,\n    NEXT_WEEK: nextWeek,\n    LAST_WEEK: prevWeek,\n  };\n\n  const slidePositioning =\n    'relative flex align-center justify-center origin-center';\n  const slideAesthetics = 'shadow-2xl bg-white rounded-lg py-48';\n  const slideDark = 'dark:bg-gray-800 dark:text-white';\n  const slideTransition = 'transition ease-in duration-200';\n\n  return (\n    <div className=\"bg-gray-200 dark:bg-gray-700 min-h-full\">\n      <GlobalHotKeys\n        keyMap={keyMap}\n        handlers={handlers}\n        style={{ outline: 'none' }}\n      />\n      <ReactTooltip effect=\"solid\"/>\n\n      <div\n        className=\"flex p-2 rounded-lg shadow-xl bg-white dark:bg-gray-800\"\n        style={{ width: 'max-content', margin: '0 auto' }}>\n        {datesByWeek.map((week) => (\n          <div className={`block`}>\n            {week.map((date) => {\n              const isSameDay = date.isSame(selectedDate, 'day');\n\n              return (\n                <div\n                  className={`cursor-pointer ${gridSizing} ${gridTransition}`}\n                  style={{\n                    margin: '2px',\n                    backgroundColor: isSameDay\n                      ? '#f25d9c'\n                      : monthColors[date.month()],\n                  }}\n                  data-date={date}\n                  data-tip={date.format(\"MMMM Do, YYYY\")}\n                  onClick={gridClick}></div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex items-center justify-center w-screen pt-12 pb-12\">\n        <div\n          className={`text-center w-11/12 max-w-screen-md ${slideAesthetics} ${slidePositioning} ${slideDark} ${slideTransition}`}>\n          <div>Top pages on {selectedDate && selectedDate.format('L')} </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CalendarGrid;\n","import { useEffect, useState } from 'react';\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState('light');\n  const [componentMounted, setComponentMounted] = useState(false);\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode)\n    setTheme(mode)\n  };\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setMode('dark')\n    } else {\n      setMode('light')\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches && !localTheme ?\n      setMode('dark') :\n      localTheme ?\n        setTheme(localTheme) :\n        setMode('light');\n    setComponentMounted(true);\n  }, []);\n\n  return [theme, toggleTheme, componentMounted]\n};","import React from 'react';\n\nimport CalendarGrid from '../components/CalendarGrid';\nimport { useDarkMode } from '../components/DarkMode';\n\nfunction Explore() {\n\tconst [theme, toggleTheme, componentMounted] = useDarkMode();\n\treturn (\n\t\t<div className=\"pt-15 min-h-full\">\n\t\t\t<CalendarGrid />\n\t\t</div>\n\t);\n}\n\nexport default Explore;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div>404!</div>\n  );\n}\n\nexport default NotFound;","import React from 'react';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n// Import pages\nimport Explore from './pages/Explore';\nimport NotFound from './pages/NotFound';\n\n// Import dark mode\nimport { useDarkMode } from './components/DarkMode';\nimport DarkModeToggle from 'react-dark-mode-toggle';\n\n// Global css\nimport './App.css';\n\nfunction App() {\n  const [theme, toggleTheme, componentMounted] = useDarkMode();\n\n  if (theme === 'dark') {\n    document.documentElement.classList.add('mode-dark');\n  } else {\n    document.documentElement.classList.remove('mode-dark');\n  }\n\n  if (!componentMounted) {\n    return <div />;\n  }\n\n  return (\n    <Router>\n      <div className=\"text-center w-screen pt-8 bg-gray-200 dark:bg-gray-700\">\n        <DarkModeToggle\n          onChange={toggleTheme}\n          checked={theme === 'dark'}\n          size={50}\n          speed={5}\n        />\n      </div>\n      <Switch>\n        {/* Public Routes */}\n        <Route exact path=\"/before\">\n          {<Explore />}\n        </Route>\n\n        {/* Catch-all Route */}\n        <Route path=\"/\">\n          <NotFound />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}